import asyncio
import os

import nextcord
import nextcord as discord
from nextcord.ext import commands

import modules.utils.error_controller as error_controller
import modules.utils.message_transformation as message_transformation
import modules.utils.ranks as rank_system
from configs import roles_config
from configs.access_config import settings
from modules.user import member_roles
from configs import roles_config, util_config
from configs.access_config import settings
from modules.user import member_roles
# from modules.utils.registration_menu.registration_functions import timeout_error, get_user_response, \
#     replace_comma_to_do, SquadronMenu, user_without_squadron
import modules.utils.registration_menu.registration_functions as registration_functions


intents = discord.Intents.all()
client = commands.Bot(command_prefix=settings['botPrefix'], intents=intents)


@client.event
async def on_ready():
    print('[INFO] Bot is ready!')


@client.event
async def on_member_join(member):
    guild_id = client.get_guild(settings['guildId'])
    await member_roles.new_player_joined(member, guild_id)
    print(f"[INFO] {member} was given the main roles.")


@client.event
async def on_command(ctx):
    print(f'[INFO] {ctx.author} called command {ctx.command}:\nArgs: {ctx.args}\nKwargs: {ctx.kwargs}')


'''@client.command()
async def help(ctx):
    # user = ctx.author
    await help_message.send_help_message(ctx)
'''

'''
@client.command()
async def rules(ctx):
    await message_transformation.send_rules_to_the_channel(ctx)
'''

@client.command()
async def t(ctx):
    await error_controller.user_has_no_roles(ctx)


@commands.has_any_role(roles_config.discord_roles['admin'])
@client.command()
async def reload(ctx, extension):
    result = ""
    if extension == "all":
        for filename in os.listdir("./cogs"):
            if filename.endswith(".py") and filename != "db.py":
                try:
                    client.unload_extension(f"cogs.{filename[:-3]}")
                    client.load_extension(f"cogs.{filename[:-3]}")
                except Exception as e:
                    result += f"[ERROR] reload **{filename}:** {e}\n"
                else:
                    result += f"**{filename[:-3]}** reloaded!\n"
    else:
        try:
            client.unload_extension(f"cogs.{extension}")
            client.load_extension(f"cogs.{extension}")
        except Exception as e:
            result += f"Error reload **{extension}:** {e}\n\n"
        else:
            await ctx.send(f"**{extension}** reloaded!")
    if result != "":
        await ctx.send(result)


@commands.has_any_role(roles_config.discord_roles['admin'])
@client.command()
async def unload(ctx, extension):
    result = ""
    if extension == "all":
        for filename in os.listdir("./cogs"):
            if filename.endswith(".py") and filename != "db.py":
                try:
                    client.unload_extension(f"cogs.{filename[:-3]}")
                except Exception as e:
                    result += f"[ERROR] unload **{filename}:** {e}\n"
                else:
                    result += f"**{filename[:-3]}** unloaded!\n"
    else:
        try:
            client.unload_extension(f"cogs.{extension}")
        except Exception as e:
            result += f"[ERROR] unload **{extension}:** {e}\n\n"
        else:
            await ctx.send(f"**{extension}** unloaded!")
    if result != "":
        await ctx.send(result)


@commands.has_any_role(roles_config.discord_roles['admin'])
@client.command()
async def load(ctx, extension):
    result = ""
    if extension == "all":
        for filename in os.listdir("./cogs"):
            if filename.endswith(".py") and filename != "db.py":
                try:
                    client.load_extension(f"cogs.{filename[:-3]}")
                except Exception as e:
                    result += f"[ERROR] load **{filename}:** {e}\n\n"
                else:
                    await ctx.send(f"**{filename[:-3]}** loaded!")
    else:
        try:
            client.load_extension(f"cogs.{extension}")
        except Exception as e:
            result += f"[ERROR] load **{extension}:** {e}\n\n"
        else:
            await ctx.send(f"**{extension}** loaded!")
    if result != "":
        await ctx.send(result)

@commands.has_any_role(roles_config.discord_roles['admin'])
@client.command()
async def mmenu(ctx, k: int):
    embed=discord.Embed(title='‚†Ä'*14+'–ú—É–∑—ã–∫–∞–ª—å–Ω–æ–µ –º–µ–Ω—é 16', color=0xe100ff)
    value = '‚ïê'*int(k-1)+'üûà'+'‚îÄ'*int(49-k)+'\n'+'‚†Ä'*17+'##:##:##/##:##:##'
    embed.add_field(name='\u200b', value=f'{value}')
    await ctx.send(embed=embed)


@commands.has_any_role(roles_config.discord_roles['admin'])
@client.command()
async def rules(ctx):
    embed=discord.Embed(title='–û–±—â–∏–µ –ø—Ä–∞–≤–∏–ª–∞', color=0xe100ff)
    embed.add_field(name="\u200b", value='```css\n1.1 –ù–∞ —ç—Ç–æ–º —Å–µ—Ä–≤–µ—Ä–µ –Ω–µ –¥–æ–ø—É—Å–∫–∞–µ—Ç—Å—è —Ä–∞—Å–æ–≤–∞—è –Ω–µ—Ç–µ—Ä–ø–∏–º–æ—Å—Ç—å –∏–ª–∏ –∫—Ä–∞–π–Ω—è—è –Ω–µ–Ω–∞–≤–∏—Å—Ç—å –ª—é–±–æ–≥–æ —Ä–æ–¥–∞.\n[–ë–∞–Ω –∏–ª–∏ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ, –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å–æ–¥–µ—Ä–∂–∞–Ω–∏—è]```', inline=False)
    
    embed.add_field(name="\u200b", value='```css\n1.2 –ù–µ –±—É–¥—å—Ç–µ —Ç–æ–∫—Å–∏–∫–æ–º, –∫–æ—Ç–æ—Ä—ã–π –ø–æ—Ä—Ç–∏—Ç –≤–µ—Å–µ–ª—å–µ –¥—Ä—É–≥–∏–º. –≠—Ç–æ –≤–∫–ª—é—á–∞–µ—Ç –≤ —Å–µ–±—è –Ω–∞—Ü–µ–ª–∏–≤–∞–Ω–∏–µ –Ω–∞ –æ–¥–Ω–æ–≥–æ —á–µ–ª–æ–≤–µ–∫–∞ –∏ –æ–±—Å–∏—Ä–∞–Ω–∏–µ –µ–≥–æ.\n[–ë–∞–Ω –∏–ª–∏ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ, –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å–æ–¥–µ—Ä–∂–∞–Ω–∏—è]```', inline=False)
    
    embed.add_field(name="\u200b", value='```css\n1.3 –ù–µ —Å–ª–∏–≤–∞–π—Ç–µ –ª–∏—á–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –¥—Ä—É–≥–∏—Ö —á–ª–µ–Ω–∞—Ö —Å–µ—Ä–≤–µ—Ä–∞ –±–µ–∑ –∏—Ö —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è. –≠—Ç–æ –æ—Ç–Ω–æ—Å–∏—Ç—Å—è –∏ –∫ –ª–∏—á–∫–µ.\n[–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –∏–ª–∏ –±–∞–Ω –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å–µ—Ä—å–µ–∑–Ω–æ—Å—Ç–∏ —É—Ç–µ—á–∫–∏]```', inline=False)
    
    embed.add_field(name="\u200b", value='```css\n1.4 –ù–µ –ø—É–±–ª–∏–∫—É–π—Ç–µ nsfw-–∫–æ–Ω—Ç–µ–Ω—Ç –≤–Ω–µ #nsfw.\n[–ë–∞–Ω]```', inline=False)
    
    embed.add_field(name="\u200b", value='```css\n1.5 –ù–µ –≤—ã–¥–∞–≤–∞–π—Ç–µ —Å–µ–±—è –∑–∞ –±–æ—Ç–æ–≤ –∏–ª–∏ –ª—é–±–æ–≥–æ —á–ª–µ–Ω–∞ —Å–µ—Ä–≤–µ—Ä–∞. (–ß–µ—Ä–µ–∑ –∏–º—è, –Ω–∏–∫ –∏–ª–∏ –∫–∞—Ä—Ç–∏–Ω–∫—É –ø—Ä–æ—Ñ–∏–ª—è)\n[–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –∏ –±–∞–Ω –≤ —Å–ª—É—á–∞–µ –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è]```', inline=False)
    
    embed.add_field(name="\u200b", value='```css\n1.6 –ó–∞–ø—Ä–µ—â–µ–Ω —Å–ø–∞–º –õ–Æ–ë–û–ì–û —Ä–æ–¥–∞, –≤–∫–ª—é—á–∞—è @everyone/@here —Å–ø–∞–º, —Å–ø–∞–º —Ä–µ–∞–∫—Ü–∏–∏, –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ/–≤—Å—Ç–∞–≤–∫–∞ —Ç–µ–∫—Å—Ç–∞, @mentions –≤ AFK.\n[–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—é –∏ –±–∞–Ω –≤ —Å–ª—É—á–∞–µ –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è.]```', inline=False)
    
    embed.add_field(name="\u200b", value='```css\n1.7 –ù–µ –ø–∏–Ω–≥—É–π—Ç–µ —Ä–æ–ª–∏ –±–µ–∑ –≤–µ—Å–∫–æ–π –ø—Ä–∏—á–∏–Ω—ã. –ü–∏–Ω–≥—É–π—Ç–µ —Ä–æ–ª–∏ —Ç–æ–ª—å–∫–æ –≤ —ç–∫—Å—Ç—Ä–µ–Ω–Ω—ã—Ö —Å–ª—É—á–∞—è—Ö.\n[–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ]```', inline=False)
    
    embed.add_field(name="\u200b", value='```css\n1.8 –ù–µ –≤—ã–ø—Ä–∞—à–∏–≤–∞—Ç—å —Ä–æ–ª—å/–∑–≤–∞–Ω–∏–µ. –ù–∞–º —ç—Ç–æ –Ω–µ –Ω—É–∂–Ω–æ, –∏ –µ—Å–ª–∏ –º—ã –ø–æ—Å—á–∏—Ç–∞–µ–º, —á—Ç–æ –≤—ã –∑–∞—Å–ª—É–∂–∏–≤–∞–µ—Ç–µ —Ä–æ–ª–∏, –º—ã –≤–∞–º –µ–µ –¥–∞–¥–∏–º.\n[–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ]```', inline=False)
    
    embed.add_field(name="\u200b", value='```css\n1.9 –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–∞–Ω–∞–ª—ã –ø–æ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—é, (–≤ –∫–∞–Ω–∞–ª–∞—Ö ¬´–º—É–∑—ã–∫–∞¬ª ‚Äì –∑–∞–ø—É—Å–∫–∞–π—Ç–µ –º—É–∑—ã–∫—É –∏ —Ç.–¥)\n[–£—Å—Ç–Ω–æ–µ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –∏ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –≤ —Å–ª—É—á–∞–µ –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è]```', inline=False)
    
    embed.add_field(name="\u200b", value='```css\n1.10 –ù–µ –≤—Å—Ç—É–ø–∞–π—Ç–µ –≤ –¥–∏—Å–∫—É—Å—Å–∏—é —Å –æ—Ñ–∏—Ü–µ—Ä–∞–º–∏ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ –ø–æ—Å–ª–µ —Ä–µ—à–µ–Ω–∏—è –æ –Ω–∞–∫–∞–∑–∞–Ω–∏–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è), –µ—Å–ª–∏ –≤—ã —Å—á–∏—Ç–∞–µ—Ç–µ, —á—Ç–æ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –±—ã–ª–æ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–º, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —Ä–µ—à–∏—Ç–µ —ç—Ç–æ—Ç –≤–æ–ø—Ä–æ—Å –≤ –ª–∏—á–∫–µ —Å —Ç–µ–º, –∫—Ç–æ –≤—ã–ø–∏—Å–∞–ª –ø—Ä–µ–¥—É–ø—Ä–µ–¥–∏–ª.\n[–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ]```', inline=False)
    
    await ctx.send(embed=embed)


# @client.command()
# async def add(ctx, user: discord.Member, stamp_id: int):
#     conn = sqlite3.connect('bot/core/data/user_stamps.db')
#     send_stamp = {}
#     cursor = conn.cursor()
#     cursor.execute(f'''SELECT stamp_id FROM stamps WHERE user_id={user.id}''')
#     stamps = cursor.fetchone()
#     if stamps is not None:
#         stamps = stamps[0]
#
#     print(f'ROW MEDALS: {stamps}')
#     if stamps is None:
#         send_medals[medal_id] = 1
#         c.execute(f'''INSERT INTO medals(user_id, medals) VALUES(\'{user.id}\',\'{send_medals}\')''')
#     else:
#         send_medals = ast.literal_eval(medals)
#         print(f'MEDALS: {send_medals}')
#         if medal_id in send_medals:
#             send_medals[medal_id] += 1
#         else:
#             send_medals[medal_id] = 1
#         c.execute(f'''UPDATE medals SET medals=\'{send_medals}\' WHERE user_id=\'{user.id}\'''')
#     conn.commit()


# class MyEmbedFieldPageSource(menus.ListPageSource):
#     def __init__(self, data):
#         super().__init__(data, per_page=2)
#
#     async def format_page(self, menu, entries):
#         embed = Embed(title="Entries")
#         for entry in entries:
#             embed.add_field(name=entry[0], value=entry[1], inline=True)
#         embed.set_footer(text=f'Page {menu.current_page + 1}/{self.get_max_pages()}')
#         return embed
#
#
#
#
# class MyEmbedDescriptionPageSource(menus.ListPageSource):
#     def __init__(self, data):
#         super().__init__(data, per_page=6)
#
#     async def format_page(self, menu, entries):
#         embed = Embed(title="Entries", description="\n".join(entries))
#         embed.set_footer(text=f'Page {menu.current_page + 1}/{self.get_max_pages()}')
#         return embed
#
#
# @client.command(aliases=["bed"])
# async def rules(ctx):
#     data = [f'Description for entry #{num}' for num in range(1, 51)]
#     pages = menus.ButtonMenuPages(
#         source=MyEmbedDescriptionPageSource(data),
#         clear_buttons_after=True,
#     )
#     await pages.start(ctx)

# settings['botToken']
client.run('OTAwODU5NjMwMzI0OTczNjA4.YXHc6Q.o1lUq8KaaFsl3ml4tSxEOPu0UFs')
